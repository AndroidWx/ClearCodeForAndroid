apply plugin: 'com.android.application'
//dagger2 okhttp
apply plugin: 'com.neenbedankt.android-apt'
//调试RxJava 插件
apply plugin: 'com.fernandocejas.frodo'
//java7支持java8插件
apply plugin: 'me.tatarka.retrolambda'

apply plugin: 'jar-gradle-plugin'
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'me.tatarka:gradle-retrolambda:3.2.3'
    }
}

android {
    //获取整体配置
    def globalConfiguration = rootProject.extensions.getByName("ext")
    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

    defaultConfig {
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")
        versionCode globalConfiguration.getAt("androidVersionCode")
    }
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    buildTypes {
        debug{
            buildConfigField "String","API_URL","\"http://c.apiplus.cn/\""
        }
        release {
            buildConfigField "String","API_URL","\"http://c.apiplus.cn/\""
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage'  // Some libraries have issues with this
        disable 'OldTargetApi'    // Due to Robolectric that modifies the manifest when running tests
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}


dependencies {
    def dataDependencies = rootProject.ext.dataDependencies
    def testDependencies = rootProject.ext.dataTestDependencies
    def childPresentationDependencies = rootProject.ext.childPresentationDependencies
    compile childPresentationDependencies.AnyPref
    compile childDataDependencies.lang3
    apt dataDependencies.daggerCompiler
    provided dataDependencies.javaxAnnotation
    compile project(':basedata')

//    testCompile  group: 'commons-codec', name: 'commons-codec', version: '1.9'

    testCompile testDependencies.junit
    testCompile testDependencies.assertj
    testCompile testDependencies.mockito
    testCompile testDependencies.robolectric


    androidTestCompile presentationTestDependencies.mockito
    androidTestCompile presentationTestDependencies.dexmaker
    androidTestCompile presentationTestDependencies.dexmakerMockito
    androidTestCompile presentationTestDependencies.espresso
    androidTestCompile presentationTestDependencies.testingSupportLib

}

BuildJar{
    //输出目录
    outputFileDir= project.buildDir.path+"/jar"
    //输出原始jar包名
    outputFileName="test.jar"
    //输出混淆jar包名
    outputProguardFileName="test_proguard.jar"
    //混淆配置
    proguardConfigFile="proguard-rules.pro"
    //是否需要默认的混淆配置proguard-android.txt
    needDefaultProguard=true
    applyMappingFile="originMapping/mapping.txt"
    //需要输出jar的包名列表,当此参数为空时，则默认全项目输出,支持多包,如 includePackage=['com/adison/testjarplugin/include','com/adison/testjarplugin/include1'...]
    includePackage=['com/ninegor/sdk']
    //不需要输出jar的jar包列表,如['baidu.jar','baidu1.jar'...]
    excludeJar=[]
    //不需要输出jar的类名列表,如['baidu.calss','baidu1.class'...]
//    excludeClass=['com/ninegor/sdk/NinegorManager.class','com/ninegor/sdk/SharedPreferenceHelp.class']
    //不需要输出jar的包名列表,如 excludePackage=['com/adison/testjarplugin/exclude','com/adison/testjarplugin/exclude1'...]
//    excludePackage=['com/ninegor/sdk/net','com/ninegor/sdk/utils']
}